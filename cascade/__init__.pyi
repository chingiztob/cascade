# ruff: noqa: F401
from typing import Dict, Tuple, List

class PyTransitGraph:
    """Efficient representation of transit graph written in Rust."""

    ...

    def get_mapping(self) -> Dict[int, PyGraphNode]:
        """Get mapping of graph raw node ids to PyGraphNode objects."""
        ...

class PyGraphNode:
    """Node of transit graph. Contains information about node type, id and geometry."""

    def get_node_type(self) -> str: ...
    def get_id(self) -> str: ...
    def get_geometry(self) -> Tuple[float, float]: ...

class PyPoint:
    """point with ID and x, y coords"""

    def __new__(cls, x: float, y: float, id: str) -> PyPoint: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def id(self) -> str: ...

def create_graph(
    gtfs_path: str, pbf_path: str, departure: int, duration: int, weekday: str
) -> PyTransitGraph: ...
def single_source_shortest_path(
    graph: PyTransitGraph, dep_time: int, x: float, y: float
) -> Dict[int, float]: ...
def shortest_path(
    graph: PyTransitGraph,
    dep_time: int,
    source_x: float,
    source_y: float,
    target_x: float,
    target_y: float,
) -> float: ...
def calculate_od_matrix(
    graph: PyTransitGraph, points: List[PyPoint], dep_time: int
) -> Dict[int, Dict[int, float]]: ...
def print_x(p: str) -> str: ...
